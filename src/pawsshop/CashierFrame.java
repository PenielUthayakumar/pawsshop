
package pawsshop;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Peniel
 */
public class CashierFrame extends javax.swing.JFrame {

    private String userType;
    public LoginForm loginForm;

    // To access userType from LoginForm
    public CashierFrame(LoginForm loginForm) {
        this.loginForm = loginForm;
        initComponents();
    }
    
//    public CashierFrame() {
//        initComponents();
////        System.out.println("CashierFrame launched without LoginForm instance");
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        supplyName = new javax.swing.JTextField();
        supplyDesc = new javax.swing.JTextField();
        supplyPrice = new javax.swing.JTextField();
        addDetailsBtn = new javax.swing.JButton();
        newCategory = new javax.swing.JTextField();
        addCategoryBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        supplyID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        supplyTbl = new javax.swing.JTable();
        searchFieldName = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        categoryTbl = new javax.swing.JTable();
        categoriesComboBox = new javax.swing.JComboBox<>();
        loadDataBtn = new javax.swing.JButton();
        deleteRowBtn = new javax.swing.JButton();
        searchFieldID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cashierName = new javax.swing.JTextField();
        cashierContactNo = new javax.swing.JTextField();
        cashierUsername = new javax.swing.JTextField();
        cashierPassword = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        addCashierBtn = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        cashierNumber = new javax.swing.JTextField();
        logoutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeLabel.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        welcomeLabel.setText("Welcome to the Cashier's Dashboard");
        jPanel1.add(welcomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("sansserif", 2, 18)); // NOI18N
        jLabel2.setText("Search Supplies");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        jLabel3.setFont(new java.awt.Font("sansserif", 2, 18)); // NOI18N
        jLabel3.setText("Add Supply Details");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, -1, -1));

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel4.setText("Category");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 310, -1, -1));

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel5.setText("Name");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, -1, -1));

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel6.setText("Description");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, -1, -1));

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel7.setText("Price");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, -1, -1));
        jPanel1.add(supplyName, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 190, 30));
        jPanel1.add(supplyDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 220, 190, 30));
        jPanel1.add(supplyPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, 190, -1));

        addDetailsBtn.setForeground(new java.awt.Color(0, 0, 0));
        addDetailsBtn.setText("Add Details");
        addDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDetailsBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addDetailsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, -1, -1));
        jPanel1.add(newCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 200, -1));

        addCategoryBtn.setForeground(new java.awt.Color(0, 0, 0));
        addCategoryBtn.setText("Add Category");
        addCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addCategoryBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        jLabel8.setFont(new java.awt.Font("sansserif", 2, 18)); // NOI18N
        jLabel8.setText("Add Category");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, -1, -1));

        jLabel9.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel9.setText("Supply ID");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 270, -1, -1));
        jPanel1.add(supplyID, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, 190, -1));

        supplyTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Description", "ID", "Category"
            }
        ));
        supplyTbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(supplyTbl);
        if (supplyTbl.getColumnModel().getColumnCount() > 0) {
            supplyTbl.getColumnModel().getColumn(1).setMaxWidth(50);
            supplyTbl.getColumnModel().getColumn(3).setMaxWidth(50);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 620, 170));
        jPanel1.add(searchFieldName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 140, -1));

        searchBtn.setForeground(new java.awt.Color(0, 0, 0));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        jPanel1.add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, -1, -1));

        categoryTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categories"
            }
        ));
        jScrollPane2.setViewportView(categoryTbl);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 130, 170));

        categoriesComboBox.setEditable(true);
        categoriesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pet Toys", "Harnesses", "Cages", "Grooming Products", "Collars" }));
        categoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriesComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(categoriesComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 310, -1, -1));

        loadDataBtn.setForeground(new java.awt.Color(0, 0, 0));
        loadDataBtn.setText("Load Data ");
        loadDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataBtnActionPerformed(evt);
            }
        });
        jPanel1.add(loadDataBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, -1, -1));

        deleteRowBtn.setForeground(new java.awt.Color(0, 0, 0));
        deleteRowBtn.setText("Delete Selected Row");
        deleteRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowBtnActionPerformed(evt);
            }
        });
        jPanel1.add(deleteRowBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 570, -1, -1));
        jPanel1.add(searchFieldID, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 90, -1));

        jLabel10.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel10.setText("Search by ID");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, -1, -1));

        jLabel11.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel11.setText("Search by Name");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jLabel12.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel12.setText("Name");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 150, -1, -1));

        jLabel13.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel13.setText("Contact");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 190, -1, -1));

        jLabel14.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel14.setText("Username");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 230, -1, -1));

        jLabel15.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel15.setText("Password");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 270, -1, -1));
        jPanel1.add(cashierName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 140, 130, -1));
        jPanel1.add(cashierContactNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 130, -1));
        jPanel1.add(cashierUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 220, 130, -1));
        jPanel1.add(cashierPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 260, 130, -1));

        jLabel16.setFont(new java.awt.Font("sansserif", 2, 18)); // NOI18N
        jLabel16.setText("Add Cashier Account");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 100, -1, -1));

        addCashierBtn.setForeground(new java.awt.Color(0, 0, 0));
        addCashierBtn.setText("Add Cashier");
        addCashierBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCashierBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addCashierBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 350, -1, -1));

        jLabel17.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel17.setText("Cashier No.");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, -1, -1));
        jPanel1.add(cashierNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 300, 130, -1));

        logoutBtn.setForeground(new java.awt.Color(0, 0, 0));
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        jPanel1.add(logoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 580, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //METHODS FOR EACH FUNCTIONALITY
    
    public void setLabelText(String text){
        welcomeLabel.setText(text);
    }
    
    public void writeDataToFile() {
        try {
            // Writing to supplyTbl
            BufferedWriter writer = new BufferedWriter(new FileWriter("supplies_data.txt"));
            DefaultTableModel supplyModel = (DefaultTableModel) supplyTbl.getModel();
            for (int i = 0; i < supplyModel.getRowCount(); i++) {
                for (int j = 0; j < supplyModel.getColumnCount(); j++) {
                    writer.write(supplyModel.getValueAt(i, j).toString());
                    if (j < supplyModel.getColumnCount() - 1) {
                        writer.write(","); // Adding comma to separate columns
                    }
                }
                writer.newLine(); // Move to the next row
            }
            writer.close();

            // Writing to categoryTbl
            BufferedWriter categoryWriter = new BufferedWriter(new FileWriter("categories_data.txt"));
            DefaultTableModel categoryModel = (DefaultTableModel) categoryTbl.getModel();
            for (int i = 0; i < categoryModel.getRowCount(); i++) {
                categoryWriter.write(categoryModel.getValueAt(i, 0).toString());
                categoryWriter.newLine();
            }
            categoryWriter.close();

            JOptionPane.showMessageDialog(this, "Data written to files successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file: " + e.getMessage());
        }
    }

    public void readDataFromFile() {
        
        // Clear existing data from both tables before loading new data
        DefaultTableModel supplyModel = (DefaultTableModel) supplyTbl.getModel();
        supplyModel.setRowCount(0);  // Clears existing rows in supplyTbl
    
        DefaultTableModel categoryModel = (DefaultTableModel) categoryTbl.getModel();
        categoryModel.setRowCount(0);  // Clears existing rows in categoryTbl
    
        try {
            // Reading from supplyTbl file
            BufferedReader reader = new BufferedReader(new FileReader("supplies_data.txt"));
            String line;

            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                supplyModel.addRow(data);
            }
            reader.close();

            // Reading from categoryTbl file
            BufferedReader categoryReader = new BufferedReader(new FileReader("categories_data.txt"));

            while ((line = categoryReader.readLine()) != null) {
                categoryModel.addRow(new Object[]{line});
            }
            categoryReader.close();

            JOptionPane.showMessageDialog(this, "Data loaded from files successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading from file: " + e.getMessage());
        }
    }
    
    public void addSupply(){
        
        //Validate if data is entered
        if(supplyName.getText().equals("") || supplyPrice.getText().equals("") || supplyDesc.getText().equals("") || supplyID.getText().equals("")){ // || supplyCategory.getText().equals("")
            JOptionPane.showMessageDialog(this,"Please enter data into all fields.");
        } else {
            
            // Converting selected object from combo box to String
            String selectedCategory = (String) categoriesComboBox.getSelectedItem();
            
            // Storing entered data in a variable
            String data[] = {supplyName.getText(), supplyPrice.getText(), supplyDesc.getText(), supplyID.getText(), selectedCategory}; //supplyCategory.getText()
            
            // Creating table object
            DefaultTableModel suppliesTable = (DefaultTableModel)supplyTbl.getModel();
            
            // Adding data to table
            suppliesTable.addRow(data);
            
            JOptionPane.showMessageDialog(this, "Supply Data Added Successfuly.");
            
            writeDataToFile();
            
            //Clearing the text field
            supplyName.setText("");
            supplyPrice.setText("");
            supplyDesc.setText("");
            supplyID.setText("");
                    
        }
    }
    
    public void addCategory(){
         if(newCategory.getText().equals("")){
            JOptionPane.showMessageDialog(this,"Please enter data.");
        } else {
            
            String data[] = {newCategory.getText()};
            
            DefaultTableModel categoriesTable = (DefaultTableModel)categoryTbl.getModel();
            
            categoriesTable.addRow(data);
            
            writeDataToFile();
            
            newCategory.setText("");
        }
    }
    
    public void deleteRow(){
        
        // Determine which table is selected
       
        if (supplyTbl.getSelectedRow() != -1) {
            
            // If a row is selected in supplyTbl, delete the row
            DefaultTableModel supplyModel = (DefaultTableModel) supplyTbl.getModel();
            
            supplyModel.removeRow(supplyTbl.getSelectedRow());
            
            JOptionPane.showMessageDialog(CashierFrame.this, "Record deleted from Supply Table.");
            
        } else if (categoryTbl.getSelectedRow() != -1) {
            
            // If a row is selected in categoryTbl, delete the row
            DefaultTableModel categoryModel = (DefaultTableModel) categoryTbl.getModel();
            
            categoryModel.removeRow(categoryTbl.getSelectedRow());
            
            JOptionPane.showMessageDialog(CashierFrame.this, "Record deleted from Category Table.");
            
        } else {
            JOptionPane.showMessageDialog(CashierFrame.this, "Please select a record to delete.");
        }
    }
    
    public void search(){
        
    String searchName = searchFieldName.getText().trim().toLowerCase();
    String searchID = searchFieldID.getText().trim();

    try (BufferedReader reader = new BufferedReader(new FileReader("supplies_data.txt"))) {
        String line;
        boolean found = false;

        while ((line = reader.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length == 5) {
                String name = data[0].trim().toLowerCase();
                String id = data[3].trim();

                boolean nameMatch = !searchName.isEmpty() && name.contains(searchName);
                boolean idMatch = !searchID.isEmpty() && id.equals(searchID);

                if (nameMatch || idMatch) {
                    String result = "Name: " + data[0] + "\nPrice: " + data[1] + "\nDescription: " + data[2] +
                                     "\nID: " + data[3] + "\nCategory: " + data[4];
                    JOptionPane.showMessageDialog(this, result, "Search Result", JOptionPane.INFORMATION_MESSAGE);
                    found = true;
                }
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "No matching supplies found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
        
        //To clear the text fields after performing function
        searchFieldName.setText("");
        searchFieldID.setText("");
    }
    
//    catch (IOException e) {
//            JOptionPane.showMessageDialog(this, "Error reading supplies data.", "Error", JOptionPane.ERROR_MESSAGE);
//        }
    catch (IOException e) {
        e.printStackTrace(); // Show exact cause in the console
        JOptionPane.showMessageDialog(this, "Error reading supplies data: " + e.getMessage());
    }
}
    
  
    public void addCashier(){
       
        
        userType = loginForm.getUserType();
        
        if(userType.equals("Manager")){
            String name = cashierName.getText();
            String contactNo = cashierContactNo.getText();
            String username = cashierUsername.getText();
            String password = cashierPassword.getText();
            String cashierNo = cashierNumber.getText();
            
                // Validate inputs (add any necessary validation here)
            if(name.isEmpty() || contactNo.isEmpty() || username.isEmpty() || password.isEmpty() || cashierNo.isEmpty()) {
                JOptionPane.showMessageDialog(this, "All fields are required.");   
            } else {
                // Creating a new Cashier object
                Cashier newCashier = new Cashier(name, contactNo, username, password, cashierNo);

                ArrayList<User> userList = LoginForm.userList; // Static reference to LoginForm's user list

                // Add the new cashier to the list in LoginForm
                userList.add(newCashier);

                // Save the updated userList to the file
                LoginForm.saveUserList();

                JOptionPane.showMessageDialog(this, "New cashier added successfully.");

                System.out.println("New cashier added successfully.");
                System.out.println(userList);
            
            }
        }
        else if(userType.equals("Cashier")){
            JOptionPane.showMessageDialog(this, "Cashiers do not have access to this functionality");
        }
    }
    
    public void logout(){
        LoginForm loginForm = new LoginForm();
        loginForm.setVisible(true);
        this.dispose();
    }
    

    private void addDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDetailsBtnActionPerformed
        addSupply();      
    }//GEN-LAST:event_addDetailsBtnActionPerformed

    private void addCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryBtnActionPerformed
        addCategory();
    }//GEN-LAST:event_addCategoryBtnActionPerformed

    private void categoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriesComboBoxActionPerformed
        // Unecessry - created by misclick
    }//GEN-LAST:event_categoriesComboBoxActionPerformed

    private void loadDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataBtnActionPerformed
        readDataFromFile(); //Load data from file when clicked
    }//GEN-LAST:event_loadDataBtnActionPerformed

    private void deleteRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowBtnActionPerformed
        deleteRow();
    }//GEN-LAST:event_deleteRowBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        search();
    }//GEN-LAST:event_searchBtnActionPerformed

    private void addCashierBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCashierBtnActionPerformed
        addCashier();
    }//GEN-LAST:event_addCashierBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        logout();
    }//GEN-LAST:event_logoutBtnActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CashierFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCashierBtn;
    private javax.swing.JButton addCategoryBtn;
    private javax.swing.JButton addDetailsBtn;
    private javax.swing.JTextField cashierContactNo;
    private javax.swing.JTextField cashierName;
    private javax.swing.JTextField cashierNumber;
    private javax.swing.JTextField cashierPassword;
    private javax.swing.JTextField cashierUsername;
    private javax.swing.JComboBox<String> categoriesComboBox;
    private javax.swing.JTable categoryTbl;
    private javax.swing.JButton deleteRowBtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadDataBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField newCategory;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchFieldID;
    private javax.swing.JTextField searchFieldName;
    private javax.swing.JTextField supplyDesc;
    private javax.swing.JTextField supplyID;
    private javax.swing.JTextField supplyName;
    private javax.swing.JTextField supplyPrice;
    private javax.swing.JTable supplyTbl;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
